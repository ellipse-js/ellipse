'use strict'

const test    = require('tap'),
      helpers = require('./helpers'),
      end     = helpers.end,
      create  = helpers.create,
      request = helpers.request

test.test('app should respond if res.body is not empty', test => {
    const app = create()

    app.get('/', ctx => {
        ctx.body = 'ok'
        ctx.send()
    })

    request(app)
        .get('/')
        .expect(200, 'ok', end(test))
})

test.test('app should not respond if response is already sent', test => {
    const app = create()

    app.get('/', ctx => {
        ctx.res.status(200, "everything's okay").send()
    })

    request(app)
        .get('/')
        .expect(200, end(test))
})

test.test('response should be manipulated befor it gets sent', test => {
    const app = create()

    app.get('/', ctx => ctx.res.send('hola'))

    app.on('respond', ctx => {
        ctx.status  = 418
        ctx.message = 'help me!'
    })

    request(app)
        .get('/')
        .expect(418, end(test))
})

test.test('implicit response should be manipulated by middleware', test => {
    const app = create()

    app.use(async (ctx, next) => {
        const now = new Date
        await next()
        ctx.set('x-response-time', new Date - now)
        ctx.body = null
        ctx.send()
    })

    app.get('/', ctx => ctx.res.body = 'hola')

    request(app)
        .get('/')
        .expect(res => {
            if (isNaN(res.headers[ 'x-response-time' ]))
                throw new Error('x-response-time header is expected, but missing')
        })
        .expect(200, end(test))
})

test.test('app should not respond', test => {
    test.test('if app.respond is false', test => {
        const app = create({ respond: false })

        app.get('/', ctx => {
            const req = ctx.req,
                  res = ctx.res

            let buf = ''
            req.setEncoding('utf8')
            req.on('data', chunk => buf += chunk)
            req.on('end', () => res.end(buf))
        })

        request(app)
            .get('/')
            .send('hello')
            .expect(200, 'hello', end(test))
    })

    test.test('if ctx.respond is false', test => {
        const app = create()

        app.get('/', ctx => {
            const req = ctx.req,
                  res = ctx.res

            ctx.respond = false

            let buf = ''
            req.setEncoding('utf8')
            req.on('data', chunk => buf += chunk)
            req.on('end', () => res.end(buf))
        })

        request(app)
            .get('/')
            .send('hello')
            .expect(200, 'hello', end(test))
    })

    test.end()
})
