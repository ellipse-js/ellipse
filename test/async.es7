'use strict'

const test    = require('tap'),
      helpers = require('./helpers'),
      end     = helpers.end,
      create  = helpers.create,
      request = helpers.request,
      app     = create(),
      onend   = end(test, 3),
      calls   = []

app.param('test', async (ctx, next) => {
    await error()
    next()
})

app.get('/error1', async () => {
    await error()
})

app.get('/error2/:test', () =>
    test.fail('handler should not be reached'))

app.use(async (ctx, next) => {
    calls.push(1)
    await next()
    calls.push(6)

    const expected = [ 1, 2, 3, 4, 5, 6 ]
    test.same(calls, expected, 'control should flow as expected')
})

app.get('/', async ctx => {
    calls.push(2)
    await work()
    calls.push(5)
    ctx.res.send('whooooooooo!')
})

app.on('error', (err, ctx) => {
    test.same(err.message, 'test', 'error should be caught')

    ctx.status  = 500
    ctx.message = 'something bad happened :('
    ctx.send()
})

test.plan(4)

request(app)
    .get('/')
    .end(onend)

request(app)
    .get('/error1')
    .expect(500)
    .end(onend)

request(app)
    .get('/error2/test')
    .expect(500)
    .end(onend)

function work() {
    calls.push(3)
    return new Promise(resolve => {
        calls.push(4)
        setImmediate(resolve)
    })
}

function error() {
    return Promise.reject(new Error('test'))
}
